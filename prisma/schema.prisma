generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  PAYMENT_PENDING
  ACCEPTED
  CANCELED
  REJECTED
  ONPROGRESS
  DONE
}

model User {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  password        String
  email           String        @unique
  phoneNumber     String
  address         String
  image           String?
  orders          Order[]
  requests        Request[]
  transactions    Transaction[]
  tokenVerify     String?
  emailVerified   Boolean?
  emailVerifiedAt DateTime?
  createdAt       DateTime      @default(now()) @db.Timestamp
  updatedAt       DateTime?     @updatedAt @db.Timestamp
  Account         Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.ObjectId
  access_token      String? @db.ObjectId
  expire_at         Int?
  token_type        String?
  scope             String?
  id_token          String? @db.ObjectId
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Admin {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  password        String
  email           String        @unique
  phoneNumber     String
  emailVerified   Boolean?
  emailVerifiedAt DateTime?
  createdAt       DateTime      @default(now()) @db.Timestamp
  updatedAt       DateTime?     @default(now()) @updatedAt @db.Timestamp
  transactions    Transaction[]
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  author      String
  name        String
  category    String
  model       String
  description String
  image       String?
  price       Int
  rating      Float?
  quantity    Int
  createdAt   DateTime @default(now()) @db.Timestamp
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp
  orders      Order[]
  color       String[]
  size        String[]
}

model Order {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  date          DateTime     @default(now())
  quantity      Int
  total_price   Int
  status        Status       @default(PENDING)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction   Transaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  userId        String       @db.ObjectId
  transactionId String?      @db.ObjectId
  createdAt     DateTime     @default(now()) @db.Timestamp
  updatedAt     DateTime     @default(now()) @updatedAt @db.Timestamp
  products      Product      @relation(fields: [productsIds], references: [id])
  productsIds   String       @db.ObjectId
  color         String
  size          String
}

model Transaction {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  date     DateTime
  noResi   String?
  price    Int?
  status   Status    @default(PENDING)
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @db.ObjectId
  admin    Admin?    @relation(fields: [adminId], references: [id])
  adminId  String?   @db.ObjectId
  orders   Order[]
  requests Request[]
}

model Request {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  request_name        String
  description         String
  design_user         String
  design_admin        String[]
  quantity            Int
  total_price         Int?
  category            String
  size                String
  color               String
  product_needed_time DateTime
  date                DateTime     @default(now())
  status              Status       @default(PENDING)
  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction         Transaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  userId              String       @db.ObjectId
  transactionId       String?      @db.ObjectId
  createdAt           DateTime     @default(now()) @db.Timestamp
  updatedAt           DateTime     @default(now()) @updatedAt @db.Timestamp
}
